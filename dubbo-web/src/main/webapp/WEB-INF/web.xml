<?xml version="1.0" encoding="UTF-8"?>
<web-app id="web" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <display-name>application</display-name>

<!--注意标签书写顺序 否则启动时会报  Error filterStart的错误-->

    <!--web容器加载步骤
        1 加载spring容器
        2 加载编码过滤器
        3 加载监听器（监听器 初始化spring容器中的bean）
        4 加载web容器的清理器（web容器关闭时释放掉所有与它相关的class 和class loader，spring的bean不需要它来管理，它有自己清理策略）
        5 model view  controller模式的具体实现 ，负责与页面交互的一系列工作，并且与spring实现无缝对接
        6 定义请求的后缀名
    -->

    <!--指定需要加载的spring容器路径 默认会从web-inf下加载-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!--method1 配置文件放在resources中-->
        <param-value>classpath:spring/spring.xml</param-value>
        <!--method2 配置文件放在web-inf下-->
        <!--<param-value>/WEB-INF/spring.xml</param-value>-->
    </context-param>

    <!--spring security过滤器-->
    <!--<filter>-->
        <!--<filter-name>springSecurityFilterChain</filter-name>-->
        <!--<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
    <!--</filter>-->

    <!--<filter-mapping>-->
        <!--<filter-name>springSecurityFilterChain</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!--统一处理编码格式的过滤器-->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!--spring启动的监听器，作用是初始化xml文件中的bean-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--在web应用关闭的时候,清除JavaBeans Introspector的监听器,-->
    <!--在web.xml中注册这个listener.可以保证在web 应用关闭的时候释放与掉这个web 应用相关的class loader 和由它管理的类-->
    <!--spring 托管的bean不需要使用这个监听器,-->
    <!--因为spring它自己的introspection所使用的缓冲在分析完一个类之后会被马上从javaBeans Introspector缓冲中清除掉.-->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <!--DispatcherServlet是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点，而且负责职责的分派，而且与Spring IoC容器无缝集成，从而可以获得Spring的所有好处。 具体请参考第二章的图2-1。-->
    <!--DispatcherServlet主要用作职责调度工作，本身主要用于控制流程，主要职责如下：-->
    <!--1、文件上传解析，如果请求类型是multipart将通过MultipartResolver进行文件上传解析；-->
    <!--2、通过HandlerMapping，将请求映射到处理器（返回一个HandlerExecutionChain，它包括一个处理器、多个HandlerInterceptor拦截器）；-->
    <!--3、通过HandlerAdapter支持多种类型的处理器(HandlerExecutionChain中的处理器)；-->
    <!--4、通过ViewResolver解析逻辑视图名到具体视图实现；-->
    <!--5、本地化解析；-->
    <!--6、渲染具体的视图等；-->
    <!--7、如果执行过程中遇到异常将交给HandlerExceptionResolver来解析。-->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <description>Spring MVC</description>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/spring.xml</param-value>
        </init-param>
    </servlet>

    <!--定义请求结尾-->
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>*.action</url-pattern>
    </servlet-mapping>


    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

</web-app>
